services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: steelpipe-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: steelpipe-backend
    ports:
      - "8000:8000"
    # env_file:
    #   - ${PWD}/backend/.env
    depends_on:
      - db
      - minio
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/steel_pipe_defect
      - MINIO_ENDPOINT=minio-dev:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=steel-pipe-defect
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
      - OMP_NUM_THREADS=1
      - MKL_NUM_THREADS=1

  db:
    image: postgres:15
    container_name: pg-steelpipe
    env_file:
      - ${PWD}/backend/.env
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=steel_pipe_defect
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    container_name: minio-dev
    env_file:
      - ${PWD}/backend/.env
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_CORS_ALLOW_ORIGIN=http://localhost:3000
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped

volumes:
  postgres_data:
  minio_data: 